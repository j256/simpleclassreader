package com.j256.simpleclassreader;

/**
 * Generic access flags that correspond to class, fields, methods, and inner-class attributes.
 * 
 * @author graywatson
 */
public enum AccessFlags {
	/** Declared public; may be accessed from outside its package */
	PUBLIC(0x0001),
	/** Declared private; accessible only within defining class and other classes belonging to same nest */
	PRIVATE(0x0002),
	/** Declared protected; may be accessed within subclasses. */
	PROTECTED(0x0004),
	/** Declared static. */
	STATIC(0x0008),
	/** Declared final; never directly assigned to after object construction. */
	FINAL(0x0010),
	/** Declared synchronized; invocation is wrapped by a monitor use. */
	SYNCHRONIZED(0x0020),
	/** Treat superclass methods specially when invoked by the invoke-special instruction. */
	SUPER(0x0020),
	/** A bridge method, generated by the compiler. */
	BRIDGE(0x0040),
	/** Declared volatile; cannot be cached. */
	VOLATILE(0x0040),
	/** Declared transient; not written or read by a persistent object manager. */
	TRANSIENT(0x0080),
	/** Declared with variable number of arguments. */
	VARARGS(0x0080),
	/** Declared native; implemented in a language other than the Java programming language. */
	NATIVE(0x0100),
	/** Is an interface, not a class. */
	INTERFACE(0x0200),
	/** Declared abstract; must not be instantiated. */
	ABSTRACT(0x0400),
	/** Declared strictfp; floating-point mode is FP-strict. */
	STRICT(0x0800),
	/** Declared synthetic; not present in the source code. */
	SYNTHETIC(0x1000),
	/** Declared as an annotation type. */
	ANNOTATION(0x2000),
	/** Declared as an element of an enum. */
	ENUM(0x4000),
	/** Is a module, not a class or interface. */
	MODULE(0x8000),
	// end
	;

	private final int bit;

	private AccessFlags(int bit) {
		this.bit = bit;
	}

	/**
	 * Return true if the access-flags have this access-info bit set.
	 */
	public boolean isEnabled(int accessFlags) {
		return ((accessFlags & bit) != 0);
	}
}
