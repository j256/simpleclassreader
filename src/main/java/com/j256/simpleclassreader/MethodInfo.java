package com.j256.simpleclassreader;

import java.io.DataInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.j256.simpleclassreader.attribute.AttributeType;
import com.j256.simpleclassreader.attribute.ExceptionsAttribute;

/**
 * Information about a method of a class.
 * 
 * @author graywatson
 */
public class MethodInfo {

	/** name of the constructor methods in the method list (hopefully true) */
	private static final String CONSTRUCTOR_METHOD_NAME = "<init>";
	private final int accessFlags;
	private final String name;
	private final MethodDescriptor methodDescriptor;
	private final AttributeInfo[] attributes;
	private final String[] exceptions;
	private final boolean constructor;

	public MethodInfo(int accessFlags, String name, MethodDescriptor methodDescriptor, AttributeInfo[] attributes,
			String[] exceptions) {
		this.accessFlags = accessFlags;
		this.name = name;
		this.methodDescriptor = methodDescriptor;
		this.attributes = attributes;
		this.exceptions = exceptions;
		this.constructor = CONSTRUCTOR_METHOD_NAME.equals(name);
	}

	/**
	 * Read in a field information entry.
	 */
	public static MethodInfo read(DataInputStream dis, ConstantPool constantPool, List<ClassReaderError> errors)
			throws IOException {

		// u2 access_flags;
		// u2 name_index;
		// u2 descriptor_index;
		// u2 attributes_count;
		// attribute_info attributes[attributes_count];

		int accessFlags = dis.readUnsignedShort();
		int index = dis.readUnsignedShort();
		String name = constantPool.findName(index);
		if (name == null) {
			errors.add(ClassReaderError.INVALID_METHOD_NAME_INDEX);
			return null;
		}
		index = dis.readUnsignedShort();
		String descriptorStr = constantPool.findName(index);
		if (descriptorStr == null) {
			errors.add(ClassReaderError.INVALID_METHOD_DESCRIPTOR_INDEX);
			return null;
		}
		MethodDescriptor methodDescriptor = null;
		if (descriptorStr != null) {
			methodDescriptor = MethodDescriptor.fromString(descriptorStr);
		}
		int attributeCount = dis.readUnsignedShort();
		List<AttributeInfo> attributes = new ArrayList<>();
		String[] exceptions = null;
		for (int i = 0; i < attributeCount; i++) {
			AttributeInfo attribute = AttributeInfo.read(dis, constantPool, errors);
			if (attribute == null) {
				continue;
			}
			if (attribute.getType() == AttributeType.EXCEPTIONS) {
				exceptions = ((ExceptionsAttribute) attribute.getValue()).getExceptions();
			}
			attributes.add(attribute);
		}

		return new MethodInfo(accessFlags, name, methodDescriptor,
				attributes.toArray(new AttributeInfo[attributes.size()]), exceptions);
	}

	/**
	 * Returns the access-flags for the method.
	 */
	public int getAccessFlags() {
		return accessFlags;
	}

	/**
	 * Returns true if declared public; may be accessed from outside its package
	 */
	public boolean isPublic() {
		return MethodAccessInfo.PUBLIC.isEnabled(accessFlags);
	}

	/**
	 * Returns true if declared private; accessible only within defining class and other classes belonging to same nest
	 */
	public boolean isPrivate() {
		return MethodAccessInfo.PRIVATE.isEnabled(accessFlags);
	}

	/**
	 * Returns true if declared protected; may be accessed within subclasses.
	 */
	public boolean isProtected() {
		return MethodAccessInfo.PROTECTED.isEnabled(accessFlags);
	}

	/**
	 * Returns true if declared static to the class.
	 */
	public boolean isStatic() {
		return MethodAccessInfo.STATIC.isEnabled(accessFlags);
	}

	/**
	 * Returns true if declared final; must not be overridden
	 */
	public boolean isFinal() {
		return MethodAccessInfo.FINAL.isEnabled(accessFlags);
	}

	/**
	 * Returns true if declared synchronized; invocation is wrapped by a monitor use.
	 */
	public boolean isSynchronized() {
		return MethodAccessInfo.SYNCHRONIZED.isEnabled(accessFlags);
	}

	/**
	 * Returns true if this is a bridge method, generated by the compiler.
	 */
	public boolean isBridge() {
		return MethodAccessInfo.BRIDGE.isEnabled(accessFlags);
	}

	/**
	 * Returns true if declared with variable number of arguments.
	 */
	public boolean isVarargs() {
		return MethodAccessInfo.VARARGS.isEnabled(accessFlags);
	}

	/**
	 * Returns true if declared native; implemented in a language other than the Java programming language.
	 */
	public boolean isNative() {
		return MethodAccessInfo.NATIVE.isEnabled(accessFlags);
	}

	/**
	 * Returns true if declared abstract; no implementation is provided.
	 */
	public boolean isAbstract() {
		return MethodAccessInfo.ABSTRACT.isEnabled(accessFlags);
	}

	/**
	 * Returns true if declared strictfp; floating-point mode is FP-strict.
	 */
	public boolean isStrict() {
		return MethodAccessInfo.STRICT.isEnabled(accessFlags);
	}

	/**
	 * Returns true if declared synthetic; not present in the source code.
	 */
	public boolean isSynthetic() {
		return MethodAccessInfo.SYNTHETIC.isEnabled(accessFlags);
	}

	/**
	 * Returns the name of the method. Constructors will have the name of "<init>"
	 */
	public String getName() {
		return name;
	}

	/**
	 * Returns true if this method has the constructor name of "<init>"
	 */
	public boolean isConstructor() {
		return constructor;
	}

	/**
	 * Returns the details about the parameters and return type.
	 */
	public MethodDescriptor getMethodDescriptor() {
		return methodDescriptor;
	}

	/**
	 * Returns the attributes of the method.
	 */
	public AttributeInfo[] getAttributes() {
		return attributes;
	}

	/**
	 * Returns the parameter descriptors from the method descriptor.
	 */
	public DataDescriptor[] getParameterDataDescriptors() {
		if (methodDescriptor == null) {
			return null;
		} else {
			return methodDescriptor.getParameterDataDescriptors();
		}
	}

	/**
	 * Returns the return descriptor from the method descriptor.
	 */
	public DataDescriptor getReturnDescriptor() {
		if (methodDescriptor == null) {
			return null;
		} else {
			return methodDescriptor.getReturnDescriptor();
		}
	}

	/**
	 * Exceptions extracted from the attributes.
	 */
	public String[] getExceptions() {
		return exceptions;
	}

	@Override
	public String toString() {
		return "method " + name;
	}

	/**
	 * Access information associated with a method from the access-flags.
	 */
	private static enum MethodAccessInfo {
		/** Declared public; may be accessed from outside its package */
		PUBLIC(0x0001),
		/** Declared private; accessible only within defining class and other classes belonging to same nest */
		PRIVATE(0x0002),
		/** Declared protected; may be accessed within subclasses. */
		PROTECTED(0x0004),
		/** Declared static. */
		STATIC(0x0008),
		/** Declared final; must not be overridden */
		FINAL(0x0010),
		/** Declared synchronized; invocation is wrapped by a monitor use. */
		SYNCHRONIZED(0x0020),
		/** A bridge method, generated by the compiler. */
		BRIDGE(0x0040),
		/** Declared with variable number of arguments. */
		VARARGS(0x0080),
		/** Declared native; implemented in a language other than the Java programming language. */
		NATIVE(0x0100),
		/** Declared abstract; no implementation is provided. */
		ABSTRACT(0x0100),
		/** Declared strictfp; floating-point mode is FP-strict. */
		STRICT(0x0800),
		/** Declared synthetic; not present in the source code. */
		SYNTHETIC(0x1000),
		// end
		;

		private final int bit;

		private MethodAccessInfo(int bit) {
			this.bit = bit;
		}

		/**
		 * Return true if the access-flags have this access-info bit set.
		 */
		public boolean isEnabled(int accessFlags) {
			return ((accessFlags & bit) != 0);
		}
	}
}
